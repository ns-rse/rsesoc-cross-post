[build-system]
requires = ["setuptools>=64", "setuptools-scm>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "rsesoc-cross-post"
version = "0.1.0"
description = "Package to automate cross posting to RSE Society social media accounts."
authors = [
    { name = "Neil Shephard", email = "n.shephard@sheffield.ac.uk" }
]
requires-python = ">=3.12"
dependencies = [
  "loguru",
  "mastodon.py",
  "linkedin-api",
  "slack_sdk",
  "tweepy",
]

[project.optional-dependencies]
tests = [
  "pytest",
  "pytest-cov",
  "pytest-github-actions-annotate-failures",
  "pytest-mpl",
  "pytest-regtest==2.3.1",
  "pytest-testmon",
  "filetype",
]
docs = [
  "mkdocs"
]
dev = [
  "black",
  "ipython",
  "pre-commit",
  "pylint",
  "pyupgrade",
  "pytest-durations",
  "pytest-icdiff",
  "pytest-xdist",
]
pypi = [
  "build",
  "setuptools_scm[toml]",
  "wheel",
]


[project.urls]
Source = "https://github.com/AFM-SPM/TopoStats"
Bug_Tracker = "https://github.com/AFM-SPM/TopoStats/issues"
Documentation = "https://AFM-SPM.github.io/TopoStats"

[project.scripts]
rsesoc-cross-post = "rsesoc_cross_post:main"

[tool.setuptools_scm]
write_to = "src/rsesoc_cross_post/_version.py"

[tool.setuptools]
include-package-data = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = ["--cov", "--mpl", "-ra", "--strict-config", "--strict-markers"]
log_level = "INFO"
log_cli = true
log_cli_level = "INFO"
testpaths = [
    "tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning"
]
xfail_strict = true

[tool.coverage.run]
source = ["src/rsesoc_cross_post"]
omit = [
  "src/rsesoc_cross_post/_version.py",
  "*tests*",
  "**/__init__*",
]

[tool.black]
line-length = 120
target-version = ['py312']
exclude = '''

(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.venv
  )/
)
'''

[tool.ruff]
exclude = [
  "*.ipynb",
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pycache__",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "venv",
]
# per-file-ignores = []
line-length = 120
lint.select = [
  "A", # flake8-builtins
  "B", # flake8-bugbear
  "C", #
  "D", # pydocstyle
  "E", # pycodestyle error
  "F",
  "I", # isort
  "NPY", # numpy
  "PT", # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  "R",
  "S", #flake8-bandit
  "W", # pycodestyle warning
  "U",
  "UP", # pyupgrade
]
lint.ignore = [
  "B905",
  "E501",
  "S101",
  "S403",
]
# Allow autofix for all enabled rules (when `--fix`) is provided.
lint.fixable = [
  "A", # flake8-builtins
  "B", # flake8-bugbear
  "C", #
  "D", # pydocstyle
  "E", # pycodestyle error
  "F",
  "I", # isort
  "NPY", # numpy
  "PT", # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  "R",
  "S", #flake8-bandit
  "W", # pycodestyle warning
  "U",
  "UP", # pyupgrade
]
lint.unfixable = []

# Numpy2 deprecation checks
lint.extend-select = ["NPY201"]
preview = false

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.isort]
case-sensitive = true

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = true

[tool.codespell]
# skip = '*.*,'
count = ''
quiet-level = 3

[tool.numpydoc_validation]
checks = [
  "all", # Perform all check except those listed below
  "ES01",
  "EX01",
  "PR10", # Conflicts with black formatting
  "SA01",
]
exclude = [  # don't report on objects that match any of these regex
    "\\.undocumented_method$",
    "\\.__repr__$",
    "^__init__",
    "^test_",
    "^conftest",
    "^conf$",
]
override_SS05 = [  # override SS05 to allow docstrings starting with these words
    "^Process ",
    "^Assess ",
    "^Access ",
]
